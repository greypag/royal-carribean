<?php

/**
 * This is the model base class for the table "promotion_code".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PromotionCode".
 *
 * Columns in table "promotion_code" available as properties of the model,
 * followed by relations of table "promotion_code" available as properties of the model.
 *
 * @property integer $promotion_id
 * @property string $promotion_name
 * @property string $promotion_code
 * @property integer $start_date
 * @property integer $end_date
 * @property string $type
 * @property integer $figure_per_guest
 * @property integer $quota
 * @property integer $accumulate_quota
 * @property string $internal_notes
 * @property string $non_pricing_notes
 *
 * @property RoomtypePromotioncode[] $roomtypePromotioncodes
 */
abstract class BasePromotionCode extends GxActiveRecord {

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'promotion_code';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Promotion Code|Promotion Codes', $n);
    }

    public static function representingColumn() {
        return 'promotion_id';
    }

    public function rules() {
        return array(
            //array('promotion_name, promotion_code, start_date, end_date, type, figure_per_guest, quota', 'required'),
            array('promotion_id, promotion_name, promotion_code, start_date, end_date, type, quota,itinerary_id', 'required'),
            array('flexible_discount_ccf_1,flexible_discount_ccf_2,flexible_discount_ccf_3,flexible_discount_ccf_4,flexible_discount_nccf_1,flexible_discount_nccf_2,flexible_discount_nccf_3,flexible_discount_nccf_4,figure_per_guest, quota,  create_date, update_date', 'numerical', 'integerOnly' => true, 'min' => 0),
            array('promotion_id', 'length', 'max' => 128),
			array('promotion_name, promotion_name_tc', 'length', 'max' => 512),
            array('promotion_code, type,ccf_discount_1_type,ccf_discount_2_type,ccf_discount_3_type,ccf_discount_4_type,nccf_discount_1_type,nccf_discount_2_type,nccf_discount_3_type,nccf_discount_4_type', 'length', 'max' => 32),
            array('promotion_id', 'unique', 'className' => 'PromotionCode',
                'attributeName' => 'promotion_id',
                'message' => 'This promotion id is already in use!'),

            //array('promotion_code', 'unique', 'className' => 'PromotionCode',
            //    'attributeName' => 'promotion_code',
            //    'message' => 'This promotion code is already in use!'),
            array('promotion_id, promotion_name, promotion_name_tc, promotion_code, start_date, end_date,type,ccf_discount_1_type,ccf_discount_2_type,ccf_discount_3_type,ccf_discount_4_type,nccf_discount_1_type,nccf_discount_2_type,nccf_discount_3_type,nccf_discount_4_type,flexible_discount_ccf_1,flexible_discount_ccf_2,flexible_discount_ccf_3,flexible_discount_ccf_4,flexible_discount_nccf_1,flexible_discount_nccf_2,flexible_discount_nccf_3,flexible_discount_nccf_4, figure_per_guest, quota, accumulate_quota, internal_notes, non_pricing_notes,itinerary_id', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'roomtypePromotioncodes' => array(self::HAS_MANY, 'RoomtypePromotioncode', 'promotion_id'),
                //'promotion' => array(self::HAS_MANY, 'Guest', 'promotion_id'),
                //'guest' => array(self::HAS_MANY, 'Guest', 'promotion_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'promotion_id' => Yii::t('app', 'Promotion ID'),
            'promotion_name' => Yii::t('app', 'Promotion Description'),
            'promotion_name_tc' => Yii::t('app', 'Promotion Description(TC)'),
            'promotion_code' => Yii::t('app', 'Promotion Code'),
            'start_date' => Yii::t('app', 'Start Date'),
            'end_date' => Yii::t('app', 'End Date'),
            'type' => Yii::t('app', 'Type'),
            'guest_1' => Yii::t('app', 'Guest 1'),
            'guest_2' => Yii::t('app', 'Guest 2'),
            'guest_3' => Yii::t('app', 'Guest 3'),
            'guest_4' => Yii::t('app', 'Guest 4'),
            'figure_per_guest' => Yii::t('app', 'Figure Per Guest'),
            'flexible_discount' => Yii::t('app', 'Flexible Discount'),
			'ccf_discount_1_type' => Yii::t('app', 'Discount CCF 1 Type'),
			'ccf_discount_2_type' => Yii::t('app', 'Discount CCF 2 Type'),
			'ccf_discount_3_type' => Yii::t('app', 'Discount CCF 3 Type'),
			'ccf_discount_4_type' => Yii::t('app', 'Discount CCF 4 Type'),
			'nccf_discount_1_type' => Yii::t('app', 'Discount NCCF 1 Type'),
			'nccf_discount_2_type' => Yii::t('app', 'Discount NCCF 2 Type'),
			'nccf_discount_3_type' => Yii::t('app', 'Discount NCCF 3 Type'),
			'nccf_discount_4_type' => Yii::t('app', 'Discount NCCF 4 Type'),
			
			'flexible_discount_ccf_1' => Yii::t('app', 'Value'),
			'flexible_discount_ccf_2' => Yii::t('app', 'Value'),
			'flexible_discount_ccf_3' => Yii::t('app', 'Value'),
			'flexible_discount_ccf_4' => Yii::t('app', 'Value'),
			'flexible_discount_nccf_1' => Yii::t('app', 'Value'),
			'flexible_discount_nccf_2' => Yii::t('app', 'Value'),
			'flexible_discount_nccf_3' => Yii::t('app', 'Value'),
			'flexible_discount_nccf_4' => Yii::t('app', 'Value'),				
            'ccf' => Yii::t('app', 'CCF'),
            'nccf' => Yii::t('app', 'NCCF'),            
            'quota' => Yii::t('app', 'Quota'),
            //'accumulate_quota' => Yii::t('app', 'Accumulate Quota'),
            'accumulate_quota' => Yii::t('app', 'No. of Quota Used'),
            'internal_notes' => Yii::t('app', 'Internal Notes'),
            //'create_date' => Yii::t('app', 'Create Date'),
            //'update_date' => Yii::t('app', 'Update Date'),
            'non_pricing_notes' => Yii::t('app', 'Non Pricing Notes'),
            'roomtypePromotioncodes' => null,
            'itinerary_id' => Yii::t('app', 'Itinerary ID'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;
        //$criteria->order = "promotion_id DESC";
        $criteria->order = "update_date DESC";
        //$criteria->order = "create_date DESC";
        $criteria->compare('promotion_id', $this->promotion_id);
        $criteria->compare('promotion_name', $this->promotion_name, true);
        $criteria->compare('promotion_name_tc', $this->promotion_name, true);
        $criteria->compare('promotion_code', $this->promotion_code, true);
        $criteria->compare('start_date', $this->start_date);
        $criteria->compare('end_date', $this->end_date);
        $criteria->compare('type', $this->type, true);
        $criteria->compare('figure_per_guest', $this->figure_per_guest);
        $criteria->compare('quota', $this->quota);
        $criteria->compare('accumulate_quota', $this->accumulate_quota);
        $criteria->compare('internal_notes', $this->internal_notes, true);
        $criteria->compare('non_pricing_notes', $this->non_pricing_notes, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => array(
                'pageSize' => 50,
            ),
        ));
    }

    protected function afterFind() {

        $this->start_date = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->start_date);
        $this->end_date = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->end_date);
    }

    protected function beforeSave() {

        $this->start_date = CDateTimeParser::parse($this->start_date, Yii::app()->params->dateFormat['long']);
        $this->end_date = CDateTimeParser::parse($this->end_date, Yii::app()->params->dateFormat['long']);
        return parent::beforeSave();
    }

    protected function beforeValidate() {

        if (strpos($this->type, 'percentage') !== false && $this->figure_per_guest >= 100) {
            $this->addError('figure_per_guest', "You can't use the a number more than 100 or equal 100 in a percentage promotion.");
        }
        return parent::beforeValidate();
    }

}
