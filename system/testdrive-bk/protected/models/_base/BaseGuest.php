<?php

/**
 * This is the model base class for the table "guest".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Guest".
 *
 * Columns in table "guest" available as properties of the model,
 * followed by relations of table "guest" available as properties of the model.
 *
 * @property integer $guest_id
 * @property integer $irt_id
 * @property string $booking_id
 * @property integer $promotion_id
 * @property string $title
 * @property string $first_name
 * @property string $middle_name
 * @property string $last_name
 * @property string $gender
 * @property string $document_type
 * @property string $document_number
 * @property integer $date_of_birth
 * @property integer $phone_no
 * @property string $email
 * @property string $citizenship
 * @property integer $cruise_fare
 * @property integer $subtotal
 * @property integer $tax_fees_port
 * @property integer $discount
 * @property string $status
 * @property string $assigned_room_id
 * @property string $rc_global_guest_id
 * @property string $internal_notes
 * @property string $allow_personalData
 *
 * @property Booking $booking
 * @property ItineraryRoomType $irt
 * @property PromotionCode $promotion
 */
abstract class BaseGuest extends GxActiveRecord {
	
	//public $repColumnsSeparator = '@';
	
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'guest';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Guest|Guests', $n);
    }

    public static function representingColumn() {
        return array('last_name', 'first_name');
    }

    public function rules() {  
        return array(
            array('irt_id, booking_id, cruise_fare, subtotal, tax_fees_port, discount, assigned_room_id, date_of_birth', 'required', 'on' => 'create, update'),
            //array('irt_id, booking_id, cruise_fare, subtotal, tax_fees_port, discount, status, assigned_room_id, rc_global_guest_id, internal_notes, allow_personalData', 'required', 'on' => 'create, update'),
            
			
			//array('title, first_name, last_name, gender, document_number, date_of_birth, phone_no, email, citizenship', 'required',  'message'=>'','on' => 'session'),
            array('title, first_name, last_name, gender, date_of_birth, phone_no, email, citizenship', 'required',  'message'=>'','on' => 'session'),
            array('irt_id, phone_no', 'numerical', 'integerOnly'=>true),
            array('booking_id, title, first_name, middle_name, last_name, document_type, document_number', 'length', 'max' => 32),
			
			
			array('gender, cruise_fare, subtotal, tax_fees_port, discount, status, assigned_room_id, rc_global_guest_id, internal_notes, allow_personalData', 'length', 'max'=>11),
            array('email', 'email', 'message' => "The email isn't correct"),
			
			
            //array('date_of_birth', 'numerical', 'integerOnly' => true),
			
            array('citizenship', 'length', 'max' => 34),
            array('promotion_id', 'length', 'max' => 128),
            array('guest_id, irt_id, booking_id, promotion_id, title, first_name, middle_name, last_name, gender, document_type, document_number, date_of_birth, phone_no, email, citizenship, cruise_fare, subtotal, tax_fees_port, discount, status, assigned_room_id, rc_global_guest_id, internal_notes, allow_personalData', 'safe', 'on' => 'search'),
                //array('irt_id, booking_id, promotion_id, cruise_fare, subtotal, tax_fees_port, discount, status, assigned_room_id, rc_global_guest_id, internal_notes, allow_personalData', 'allowEmpty' => true, 'on' => 'session'),
        );
    }

    public function relations() {
        return array(
            'booking' => array(self::BELONGS_TO, 'Booking', 'booking_id'),
            'irt' => array(self::BELONGS_TO, 'ItineraryRoomType', 'irt_id'),
            //'irt' => array(self::HAS_MANY, 'Itinerary', 'itinerary_id'),
            'promotion' => array(self::BELONGS_TO, 'PromotionCode', 'promotion_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'guest_id' => Yii::t('app', 'Guest ID'),
            'irt_id' => Yii::t('app', 'Itinerary and Stateroom Type'),
            'booking_id' => Yii::t('app', 'Booking ID'),
            'promotion_id' => Yii::t('app', 'Promotion ID'),
            'title' => Yii::t('app', 'Title'),
            'first_name' => Yii::t('app', 'First Name'),
            'middle_name' => Yii::t('app', 'Middle Name'),
            'last_name' => Yii::t('app', 'Last Name'),
            'gender' => Yii::t('app', 'Gender'),
            'document_type' => Yii::t('app', 'Document Type'),
            'document_number' => Yii::t('app', 'Passport Number'),
            'date_of_birth' => Yii::t('app', 'Date of Birth'),
            'phone_no' => Yii::t('app', 'Mobile number'),
            'email' => Yii::t('app', 'Email'),
            'citizenship' => Yii::t('app', 'Citizenship'),
            'cruise_fare' => Yii::t('app', 'Cruise Fare'),
            'subtotal' => Yii::t('app', 'Subtotal'),
            'tax_fees_port' => Yii::t('app', 'Tax Fees Port'),
            'discount' => Yii::t('app', 'Discount'),
            'status' => Yii::t('app', 'Status'),
            'assigned_room_id' => Yii::t('app', 'Assigned Stateroom ID'),
            'rc_global_guest_id' => Yii::t('app', 'Rc Global Guest'),
            'internal_notes' => Yii::t('app', 'Internal Notes'),
            'allow_personalData' => Yii::t('app', 'Allow Personal Data'),
            'booking' => null,
            'irt' => null,
            'promotion' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('guest_id', $this->guest_id);
        $criteria->compare('irt_id', $this->irt_id);
        $criteria->compare('booking_id', $this->booking_id);
        $criteria->compare('promotion_id', $this->promotion_id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('first_name', $this->first_name, true);
        $criteria->compare('middle_name', $this->middle_name, true);
        $criteria->compare('last_name', $this->last_name, true);
        $criteria->compare('gender', $this->gender, true);
        $criteria->compare('document_type', $this->document_type, true);
        $criteria->compare('document_number', $this->document_number, true);
        $criteria->compare('date_of_birth', $this->date_of_birth);
        $criteria->compare('phone_no', $this->phone_no);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('citizenship', $this->citizenship, true);
        $criteria->compare('cruise_fare', $this->cruise_fare);
        $criteria->compare('subtotal', $this->subtotal);
        $criteria->compare('tax_fees_port', $this->tax_fees_port);
        $criteria->compare('discount', $this->discount);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('assigned_room_id', $this->assigned_room_id, true);
        $criteria->compare('rc_global_guest_id', $this->rc_global_guest_id, true);
        $criteria->compare('internal_notes', $this->internal_notes, true);
        $criteria->compare('allow_personalData', $this->allow_personalData, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['CGridViewPagination']['defaultPageSize']),
            )
        ));
    }

    //no use now 20-7-2015
    public function searchForBookingReport() {
        $criteria = new CDbCriteria;

        $criteria->compare('guest_id', $this->guest_id);
        $criteria->compare('irt_id', $this->irt_id);
        $criteria->compare('booking_id', $this->booking_id);
        $criteria->compare('promotion_id', $this->promotion_id);
        $criteria->compare('title', $this->title, true);
        $criteria->compare('first_name', $this->first_name, true);
        $criteria->compare('middle_name', $this->middle_name, true);
        $criteria->compare('last_name', $this->last_name, true);
        $criteria->compare('gender', $this->gender, true);
        $criteria->compare('document_type', $this->document_type, true);
        $criteria->compare('document_number', $this->document_number, true);
        $criteria->compare('date_of_birth', $this->date_of_birth);
        $criteria->compare('phone_no', $this->phone_no);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('citizenship', $this->citizenship, true);
        $criteria->compare('cruise_fare', $this->cruise_fare);
        $criteria->compare('subtotal', $this->subtotal);
        $criteria->compare('tax_fees_port', $this->tax_fees_port);
        $criteria->compare('discount', $this->discount);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('assigned_room_id', $this->assigned_room_id, true);
        $criteria->compare('rc_global_guest_id', $this->rc_global_guest_id, true);
        $criteria->compare('internal_notes', $this->internal_notes, true);
        $criteria->compare('allow_personalData', $this->allow_personalData, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['CGridViewPagination']['defaultPageSize']),
            ),
            'sort' => array(
                'defaultOrder' => 'guest_id DESC'
            )
        ));
    }

    protected function afterFind() {
        // convert to display format
        $this->date_of_birth = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->date_of_birth);
        return parent::afterFind();
    }

    protected function beforeValidate() {

        //$this->date_of_birth =  Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->date_of_birth);
        return parent::beforeValidate();
    }

}
