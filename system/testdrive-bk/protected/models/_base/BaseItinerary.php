<?php

/**
 * This is the model base class for the table "itinerary".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Itinerary".
 *
 * Columns in table "itinerary" available as properties of the model,
 * followed by relations of table "itinerary" available as properties of the model.
 *
 * @property integer $id
 * @property string $itinerary_id
 * @property string $itinerary_name
 * @property string $days_nights_full_desc
 * @property string $days_nights_short_desc
 * @property integer $minimum_cruise_fares
 * @property string $pdf
 * @property string $image
 * @property string $language
 * @property integer $start_date
 * @property integer $end_date
 * @property string $cruise_id
 *
 * @property Cruise $cruise
 * @property ItineraryRoomType $irt
 * @property ItineraryRoomType[] $itineraryRoomTypes
 */
abstract class BaseItinerary extends GxActiveRecord {

    public $start_date;
    public $end_date;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'itinerary';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Itinerary|Itineraries', $n);
    }

    public static function representingColumn() {
        return 'itinerary_id';
    }

    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('itinerary_id, itinerary_name, days_nights_full_desc, days_nights_full_desc_tc, minimum_cruise_fares, port_of_departure, ports_of_calls, ports_of_calls_tc, start_date, end_date, cruise_id, taxes_fee, ncff, status', 'required'),
            //array('itinerary_id, itinerary_name, days_nights_full_desc, days_nights_full_desc_tc, minimum_cruise_fares, port_of_departure, ports_of_calls, ports_of_calls_tc, port_of_boarding, start_date, end_date, cruise_id, taxes_fee, port_expenses, prepaid_gratuties, ncff', 'required'),
            //comefield are not provided in testing data
            //array('itinerary_id, itinerary_name, days_nights_full_desc, days_nights_full_desc_tc, minimum_cruise_fares, port_of_departure, ports_of_calls,  ports_of_calls_tc, port_of_boarding, start_date, end_date, cruise_id, ', 'required'),
            array(
                'itinerary_id',
                'match', 'pattern' => '/^\S*$/',
                'message' => 'No space allowed in itinerary_id.',
            ),
            array('itinerary_id', 'unique', 'className' => 'Itinerary',
                'attributeName' => 'itinerary_id',
                'message' => 'This Itinerary ID is already in use!'),
            //array('minimum_cruise_fares, taxes_fee, port_expenses, ncff', 'numerical', 'integerOnly' => true, 'max' => 100000),
            //array('minimum_cruise_fares, taxes_fee, port_expenses', 'numerical', 'max' => 100000, 'min' => 1),
            //array('minimum_cruise_fares, start_date, end_date', 'numerical', 'integerOnly' => true),
            //array('start_date, end_date', 'type', 'type' => 'date', 'message' => '{attribute}: is not a date!', 'dateFormat' => 'dd-mm-yyyy'),
            array('itinerary_id, port_of_departure, port_of_boarding', 'length', 'max' => 32),
            array('itinerary_name', 'length', 'max' => 128),
            array('days_nights_full_desc, days_nights_full_desc_tc, prepaid_gratuties', 'length', 'max' => 255),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, itinerary_id,itinerary_name, itinerary_name_tc, days_nights_full_desc, days_nights_full_desc_tc, minimum_cruise_fares, pdf, port_of_departure, port_of_departure_tc, ports_of_calls, port_of_boarding, start_date, end_date, cruise_id, taxes_fee, port_expenses, prepaid_gratuties, ncff, status', 'safe', 'on' => 'search'),
                /*
                  //Part of files!
                  array('pdf', 'file', 'types' => 'pdf', 'message' => 'Please upload correct file format for {attribute}.', 'on' => 'insert'),
                  array('image', 'file', 'types' => 'jpg, gif, png', 'message' => 'Please upload correct file format for {attribute}.', 'on' => 'insert'),
                  array('image ,pdf', 'required', 'on' => 'insert'),
                  array('image', 'file', 'on' => 'update',
                  'allowEmpty' => true,
                  'types' => 'jpg, gif, png'
                  ),
                  array('pdf', 'file', 'on' => 'update',
                  'allowEmpty' => true,
                  'types' => 'pdf'
                  ),
                 */
                /*
                  array('image ,pdf', 'default', 'setOnEmpty' => true,
                  'value' => null,
                  ), */
        );
    }

    public function relations() {
        return array(
            // 'cruise' => array(self::BELONGS_TO, 'Cruise', 'cruise_id', 'on'=>'itineraries.cruise_id=cruise_id'),
            'cruise' => array(self::BELONGS_TO, 'Cruise', 'cruise_id'),
            'itineraryRoomTypes' => array(self::HAS_MANY, 'ItineraryRoomType', 'itinerary_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'itinerary_id' => Yii::t('app', 'Itinerary Code'),
            'itinerary_name' => Yii::t('app', 'Itinerary Name'),
            'days_nights_full_desc' => Yii::t('app', 'No. of Days/Nights Desc'),
            'days_nights_full_desc_tc' => Yii::t('app', 'No. of Days/Nights Desc (TC)'),
            'minimum_cruise_fares' => Yii::t('app', 'Minimum Cruise Fare'),
            'pdf' => Yii::t('app', 'PDF'),
            'image' => Yii::t('app', 'Image'),
            'start_date' => Yii::t('app', 'Start Date'),
            'end_date' => Yii::t('app', 'End Date'),
            'port_of_departure' => Yii::t('app', 'Port of Departure'),
            'ports_of_calls' => Yii::t('app', 'Get-royal-deals name'),
            'ports_of_calls_tc' => Yii::t('app', 'Get-royal-deals name(TC)'),
            'port_of_boarding' => Yii::t('app', 'Port of Arrival'),
            'cruise_id' => 'Cruise ID',
            'cruise' => null,
            'cruise_name' => Yii::t('app', 'Ship'),
            'taxes_fee' => Yii::t('app', 'Port Fees and Taxes'),
            'port_expenses' => Yii::t('app', 'Port expenses'),
            'prepaid_gratuties' => Yii::t('app', 'Pre-paid Gratuities per Guest'),
            'ncff' => Yii::t('app', 'NCFF'),
            'status' => Yii::t('app', 'Status'),
            //'irt' => null,
            'itineraryRoomTypes' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->with = array('cruise');
        $criteria->compare('itinerary_id', $this->itinerary_id, true);
        $criteria->compare('itinerary_name', $this->itinerary_name, true);
        $criteria->compare('days_nights_full_desc', $this->days_nights_full_desc, true);
        $criteria->compare('days_nights_full_desc_tc', $this->days_nights_full_desc_tc, true);
        $criteria->compare('minimum_cruise_fares', $this->minimum_cruise_fares);
        $criteria->compare('pdf', $this->pdf, true);
        $criteria->compare('image', $this->image, true);
        $criteria->compare('port_of_departure', $this->port_of_departure);
        $criteria->compare('ports_of_calls', $this->ports_of_calls);
        $criteria->compare('port_of_boarding', $this->port_of_boarding);

        //$criteria->compare('start_date',  $this->start_date);
        //$criteria->compare('end_date',  $this->end_date);
        //if ($now <= $endTimeStamp && $now >= $startTimeStamp) {
        //$criteria->compare('start_date', '>=:' . CDateTimeParser::parse($this->start_date, Yii::app()->params->dateFormat['long']));
        //$criteria->compare('start_date', '>=:' . CDateTimeParser::parse('08/04/2015', Yii::app()->params->dateFormat['long']));
        if (!empty($this->start_date)) {
            $criteria->compare('start_date', '>=' . CDateTimeParser::parse($this->start_date, Yii::app()->params->dateFormat['long']));
        }
        if (!empty($this->end_date)) {
            $criteria->compare('end_date', '<=' . CDateTimeParser::parse($this->end_date, Yii::app()->params->dateFormat['long']));
        }
        if (!empty($this->cruise_id)) {
            $criteria->compare('cruise.cruise_id', $this->cruise_id);
        }

        //$criteria->compare('cruise_id', $this->cruise_id);
        $criteria->compare('status', $this->status);
        $criteria->compare('taxes_fee', $this->taxes_fee);
        $criteria->compare('port_expenses', $this->port_expenses);
        $criteria->compare('prepaid_gratuties', $this->prepaid_gratuties);
        $criteria->compare('ncff', $this->ncff);


        // http://www.yiiframework.com/forum/index.php/topic/20941-filter-date-range-on-cgridview-toolbar/
        //if ((isset($this->start_date) && trim($this->end_date) != "") && (isset($this->start_date) && trim($this->end_date) != ""))
        //    $criteria->addBetweenCondition('date', '' . $this->start_date . '', '' . $this->end_date . '');


        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => array(
                //'defaultOrder' => 'timestamp(t.start_date) DESC', //t means Itinerary
                'defaultOrder' => 't.start_date DESC', //t means Itinerary
                //'defaultOrder' => 't.status ASC ,timestamp(t.start_date) DESC', //t means Itinerary
            ),
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['CGridViewPagination']['defaultPageSize']),
            )
        ));
    }

    protected function afterFind() {
        // convert to display format
        $this->start_date = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->start_date);
        $this->end_date = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->end_date);
        $this->minimum_cruise_fares = Yii::app()->format->formatNumber($this->minimum_cruise_fares);
        $this->taxes_fee = Yii::app()->format->formatNumber($this->taxes_fee);
        $this->port_expenses = Yii::app()->format->formatNumber($this->port_expenses);
        //$this->prepaid_gratuties = Yii::app()->format->formatNumber($this->prepaid_gratuties);
        $this->ncff = Yii::app()->format->formatNumber($this->ncff);

        if (!empty($this->pdf)) {
            $this->pdf = Yii::app()->getBaseUrl(true) . '/' . $this->pdf;
        }
        if (!empty($this->image)) {
            $this->image = Yii::app()->getBaseUrl(true) . '/' . $this->image;
        }
        parent::afterFind();
    }

    protected function beforeSave() {

        $this->start_date = CDateTimeParser::parse($this->start_date, Yii::app()->params->dateFormat['long']);
        $this->end_date = CDateTimeParser::parse($this->end_date, Yii::app()->params->dateFormat['long']);
        return parent::beforeSave();
    }

    protected function beforeValidate() {
        // convert to storage format
        //$this->start_date =  Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->start_date);
        //$this->end_date =  Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat['long'], $this->end_date);

        $this->minimum_cruise_fares = Yii::app()->format->unformatNumber($this->minimum_cruise_fares);

        $this->taxes_fee = Yii::app()->format->unformatNumber($this->taxes_fee);
        //$this->port_expenses = Yii::app()->format->unformatNumber($this->port_expenses);
        //$this->prepaid_gratuties = Yii::app()->format->unformatNumber($this->prepaid_gratuties);
        $this->ncff = Yii::app()->format->unformatNumber($this->ncff);


        $this->pdf = str_replace(Yii::app()->getBaseUrl(true) . '/', '', $this->pdf);
        $this->image = str_replace(Yii::app()->getBaseUrl(true) . '/', '', $this->image);


        //CVarDumper::dump($this->pdf, 10, true);
        //CVarDumper::dump($this->image, 10, true);
        //Yii::app()->end();

        return parent::beforeValidate();
    }

}
