<?php

/**
 * This is the model base class for the table "room_inventory".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "RoomInventory".
 *
 * Columns in table "room_inventory" available as properties of the model,
 * followed by relations of table "room_inventory" available as properties of the model.
 *
 * @property integer $room_inventory_id
 * @property string $itinerary_id
 * @property string $rt_id
 * @property string $room_no
 * @property integer $update_time
 * @property integer $booking_time
 * @property string $status
 * @property string $notes
 *
 * @property Itinerary $itinerary
 * @property RoomType $rt
 */
abstract class BaseRoomInventory extends GxActiveRecord {

    public $quantity;

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'room_inventory';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Stateroom Inventory|Stateroom Inventories', $n);
    }

    public static function representingColumn() {
        return 'room_no';
    }

    public function rules() {
        return array(
            //array('itinerary_id, rt_id, room_no, update_time, booking_time, status, notes', 'required'),
            //array('itinerary_id', 'UniqueAttributesValidator', 'with' => 'rt_id', 'message' => 'Same relation is existed!'),
            array('itinerary_id, rt_id, room_no, status', 'required', 'on' => 'update'),
            array('update_time, quantity', 'numerical', 'integerOnly' => true),
            array('itinerary_id, rt_id, booking_ip, status', 'length', 'max' => 32),
            array('room_no', 'length', 'max' => 64),
            array('reservation_code', 'length', 'max' => 20),
            array('room_inventory_id, itinerary_id, rt_id, room_no, update_time, booking_ip, status, reservation_code, notes', 'safe', 'on' => 'search'),
            array('itinerary_id, rt_id, quantity', 'required', 'on' => 'function_generator'),
        );
    }

    public function relations() {
        return array(
            'itinerary' => array(self::BELONGS_TO, 'Itinerary', 'itinerary_id'),
            'rt' => array(self::BELONGS_TO, 'RoomType', 'rt_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'room_inventory_id' => Yii::t('app', 'Stateroom'),
            'itinerary_id' => 'Itinerary ID',
            'room_no' => Yii::t('app', 'Stateroom No.'),
            'update_time' => Yii::t('app', 'Last Updated'),
            'booking_ip' => Yii::t('app', 'Booking IP'),
            'status' => Yii::t('app', 'Status'),
            'notes' => Yii::t('app', 'Notes'),
            'itinerary' => null,
            'rt_id' => Yii::t('app', 'Stateroom Cat. ID'),
            'reservation_code' => Yii::t('app', 'Reservation ID'),
        );
    }

    public function search($condition = null) {
        $criteria = new CDbCriteria;

        $criteria->compare('room_inventory_id', $this->room_inventory_id);
        $criteria->compare('itinerary_id', $this->itinerary_id);
        $criteria->compare('rt_id', $this->rt_id);
        $criteria->compare('room_no', $this->room_no, true);
        $criteria->compare('update_time', $this->update_time);
        $criteria->compare('booking_ip', $this->booking_ip);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('notes', $this->notes, true);
        $criteria->compare('reservation_code', $this->reservation_code);

        /*
          if (!is_null($condition)) {

          $criteria->addCondition("status LIKE '%" . $condition . "%'");
          }
         */
        //CVarDumper::dump($this, 10, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'pagination' => array(
                'pageSize' => Yii::app()->user->getState('pageSize', Yii::app()->params['CGridViewPagination']['defaultPageSize']),
            ),
        ));
    }

    protected function afterFind() {
        /*
          if ($this->update_time == 0 || is_null($this->update_time)) {

          $this->update_time = '';
          } else {
          $this->update_time = Yii::app()->getDateFormatter()->format(Yii::app()->params->dateFormat["long_time"], $this->update_time);
          }

         */
        parent::afterFind();
    }

}
